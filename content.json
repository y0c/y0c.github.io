{"meta":{"title":"Lazy Developer","subtitle":null,"description":"Web Developer & Student","author":"HoSung","url":"https://y0c.github.io"},"pages":[],"posts":[{"title":"Tmux Tutorial 정리","slug":"tmux-tutorial","date":"2018-09-27T03:18:51.000Z","updated":"2018-09-27T03:23:40.570Z","comments":true,"path":"2018/09/27/tmux-tutorial/","link":"","permalink":"https://y0c.github.io/2018/09/27/tmux-tutorial/","excerpt":"","text":"필자는 Editor중 Vim을 선호하고 주로 사용하는 편이다. Vim을 사용할때 보통 두가지 방법으로 사용하게 된다. IDE 설치후 Vim 플러그인을 통하여 사용 Terminal에서 Vim을 사용 필자는 주로 첫 번째 방법을 통해서 사용하였다.회사에선 주로 Java, Spring계열의 Backend 개발을 하다보니 IDE에 의존적인 기능들이 좀 많았던게 이유이다. 하지만 사이드 프로젝트 개발은 주로 Terminal과 Text Editor로써의 기능을 사용하는 것 같아서 Terminal을 통한 개발환경도 괜찮지 않을까? 라는 생각이들어서 시도해보게 되었다. 이번에 Terminal기반의 Vim 개발환경을 만들때 Tmux라는 것을 알게되었다.이번 포스팅은 Tmux에 대한 간단한 Tutorial 과 사용법을 적어보려 한다./VIm 플러그인이나 사용경험에 대해서는 별도의 포스팅을 작성할 예정이다./ TmuxTmux는 TTY 멀티플렉서 이다. 쉽게 말하자면 하나의 터미널에서 여러개의 터미널로 분할하여 사용할 수 있고. 세션을 생성하여 attach/detach 를 할 수 있다.Mac OS의 ITerm2와 같은 터미널을 사용하게 되면 기본적으로 화면분할을 제공하는데 Tmux는 기본적인 화면분할과 더불어 세션기능을 제공한다.ssh를 통해 원격으로 작업하다가 종료후 재접속 한 후 tmux session에 다시 attach만 해주면 기존의 작업환경을 그대로 사용할 수 있다. 이외에도 단축키와 여러 plugin을 설치해서 사용할 수 있으므로 Mac OS의 ITerm과는 조금 다른 종류라고 보는게 좋을것 같다. 아래 내용에선 Tmux 설치 부터 단축키 Plugin 설치 및 관리방법을 위주로 작성하려한다 InstallationMac OSbrew install tmux Tmux 용어 프리픽스(prefix)단축키입력전에 입력해야하는 키 조합이다. 기본적으로 ctrl + b조합키가 아니라 명령모드 같은 개념이다. 세션(session)Tmux에서 관리하는 가장 큰 단위 윈도우(window)세션에 존재하는 탭 팬(pane)윈도우에 존재하는 화면 단위 Configvi ~/.tmux.conf Reload 시에는tmux source ~/.tmux.conf명령을 통해서 config를 reload 할 수 있다. Shortcut Session 시작123tmux# with session nametmux new -s &lt;session_name&gt; Session 목록1tmux ls Session 종료1234567tmux kill-session -t &lt;session_name&gt;# kill all tmux session tmux ls | grep : | cut -d. -f1 | awk '&#123;print substr($1, 0, length($1)-1)&#125;' | xargs kill# Server shutdowntmux kill-server Session attach1234tmux attach -t &lt;session_name&gt;# or tmux a -t ... 아래 단축키들은 Session attach 후 명령모드에서만 작동한다.즉, prefix(ctrl+a)를 먼저 입력한 후에 아래키들이 동작한다고 보면된다. Session123:new&lt;CR&gt; new sessions list sessions$ name session Window1234567c create windoww list windowsn next windowp previous windowf find window, name window&amp; kill window Panes(Splits)1234567891011121314% vertical split\" horizontal splito swap panesq show pane numbersx kill pane+ break pane into window (e.g. to select text by mouse to copy)- restore pane from window⍽ space - toggle between layouts&lt;prefix&gt; q (Show pane numbers, when the numbers show up type the key to goto that pane)&lt;prefix&gt; &#123; (Move the current pane left)&lt;prefix&gt; &#125; (Move the current pane right)# 하나의 팬을 전체화면으로 유용하게 사용&lt;prefix&gt; z toggle pane zoom PluginTmux는 다양한 Plugin으로 커스터마이징이 가능하다. 구글링을 좀 해보면 상태바를 이쁘게 만드는 방법이나 키매핑을 편리하게해주거나 등 다양한 플러그인이 있으니 찾아보면 된다. 여기선 기본적으로 플러그인을 설치하는 방법만 적어보려한다.먼저 패키지 매니저인 TPM을 설치한다. 설치가 정상적으로 됬다면 그후론 ~/.tmux.conf 에 설치할 플러그인 목록을 작성한후 &lt;prefix&gt; + I 로 설치할 수 있다. 자세한내용은 TPM repo의 README를 참고하도록 하자. 필자가 사용중인 플러그인 목록이다. tmux-resurrect tmux-cpu-mem-load tmux-pane-control 참고https://blog.outsider.ne.kr/699https://www.haruair.com/blog/2124https://gist.github.com/MohamedAlaa/2961058https://bluesh55.github.io/2016/10/10/tmux-tutorial/ 마무리그냥 터미널에서 Vim을 좀 더 편하게 사용해보려고 시작했지만 이외의 용도로도 유용하게 사용할 수 있을것같다. 꼭 vim과 같이 사용하지 않더라도 서버에 깔아두거나 mac에서 사용하기에 장점이 많은 것 같다. 페어프로그래밍에도 쓰일 수 있다는데 기회가 되면 해보고 싶다.","categories":[{"name":"Tmux","slug":"Tmux","permalink":"https://y0c.github.io/categories/Tmux/"}],"tags":[{"name":"tmux","slug":"tmux","permalink":"https://y0c.github.io/tags/tmux/"}]},{"title":"Semantic-Ui-React Theme Customizing","slug":"semantic-ui-react-theme","date":"2018-09-10T12:38:56.000Z","updated":"2018-09-10T12:41:50.676Z","comments":true,"path":"2018/09/10/semantic-ui-react-theme/","link":"","permalink":"https://y0c.github.io/2018/09/10/semantic-ui-react-theme/","excerpt":"","text":"semantic-ui-react는 semantic-ui 를 react로 구현한 라이브러리이다.react로 프로젝트를 하게되면 ui kit으로 semantic-ui-react를 많이 사용되고 있다. 한 번 사용해본 후기로는 다양한 형태의 UI Component를 지원해서 UI를 구현하는데 걸리는 시간을 많이 단축시켜 생산성을 올려준다. 하지만 사용하다 보면 테마를 변경해야하거나 Component Style을 변경하고 싶을때가 있다. 이 글에선 create-react-app 으로 생성한 react app에서 semantic-ui-react 테마를 커스터마이징 해본 경험을 공유해보고자 한다. 공식 메뉴얼에도 테마 커스터마이징에 대해서 두가지 방법으로 소개하고 있다. Semantic-UI-Less project를 받아서 Customizing 하는 방법 Webpack2 와 연동 하여 Customizing 하는 방법 첫 번째 방법은 create-react-app 을 통해서 프로젝트를 만들었을경우 따로 프로젝트를 만들어서 컴파일 한 후 css파일을 옮겨야 하기 때문에 굉장히 번거로울 수 있다.이 글에선 두 번째 방법을 기준으로 설명하려 한다. 거이 대부분의 가이드는 위 가이드 문서에 잘 작성되어 있다.단, create-react-app 환경에선 몇가지 이슈가 있었다. 먼저 create-react-app 환경이라면 yarn run eject 명령을 통해서 webpack 설정을 커스터마이징 해야한다. semantic-ui-less 모듈을 설치한다.1yarn add semantic-ui-less 테마를 커스터마이징 하기 위해서 설치된 기본 테마와 설정을 로컬로 복사해와야한다.위 문서에는 root폴더 아래에 theme폴더를 만들라고 권장하고 있지만 create-react-app 구조에서는 src폴더 아래에 theme 폴더를 만들어주면 된다. theme 폴더는 site폴더와 theme.config 설정파일을 만들어주도록 하자. config파일은 node_modules/semantic-ui-less/theme.config.example 복사해서 생성 site폴더는 node_modules/semantic-ui-less/site/default아래 폴더 모두 복사 여기까지 됬다면 theme.config 파일의 variable을 현재 설정에 맞춰줘야 한다. @import &quot;theme.less&quot;; 부분을 @import (multiple) &quot;~semantic-ui-less/theme.less&quot;; 와 같이 수정한다. @siteFolder : &quot;site&quot;; 부분을 @siteFolder : &quot;../../src/styles/semantic/theme/site&quot; 와 같이 수정한다. 여기서 siteFolder는 현재 site폴더의 경로이다. (필자는 /src/styles/semantic/theme/site 로 설정되어 있다) config 파일의 마지막 라인에 @fontPath : &quot;../../../themes/@{theme}/assets/fonts&quot;;를 추가해주도록 한다. theme config 파일 설정을 마치면 아래와 같이 webpack alias를 추가하도록 한다.참고로 create-react-app 으로 설정할시 __dirname은 script폴더이므로 아래 필자와 같이 설정하도록 한다.1234567alias: &#123; '../../theme.config$': path.join(__dirname, '../src/styles/semantic/theme/theme.config'), // Support React Native Web // https://www.smashingmagazine.com/2016/08/a-glimpse-into-the-future-with-react-native-for-web/ 'react-native': 'react-native-web', &#125;, 다음으론 webpack환경에서 less를 compile하기 위해서 아래와 같이 css-loader, less-loader, extract-text-plugin을 설치한다. extract-text-plugin은 production에만 적용해주면되는데 아래와같이 모두 less-loader만 추가해주면 된다.1yarn add --dev less css-loader less-loader extract-text-webpack-plugin 12345678910111213141516171819202122232425262728293031&#123; test: /\\.css$|\\.less$/, use: [ require.resolve('style-loader'), &#123; loader: require.resolve('css-loader'), options: &#123; importLoaders: 1, &#125;, &#125;, &#123; loader: require.resolve('postcss-loader'), options: &#123; // Necessary for external CSS imports to work // https://github.com/facebookincubator/create-react-app/issues/2677 ident: 'postcss', plugins: () =&gt; [ require('postcss-flexbugs-fixes'), autoprefixer(&#123; browsers: [ '&gt;1%', 'last 4 versions', 'Firefox ESR', 'not ie &lt; 9', // React doesn't support IE8 anyway ], flexbox: 'no-2009', &#125;), ], &#125;, &#125;, &#123; loader : 'less-loader'&#125; 맨아래줄에 less-loader를 추가해준다. 참고로 create-react-app의 경우 아래와같은 설정이 있는데 이부분을 주석으로 막아야 정상적으로 동작한다.. 1234567891011&#123; // Exclude `js` files to keep \"css\" loader working as it injects // its runtime that would otherwise processed through \"file\" loader. // Also exclude `html` and `json` extensions so they get processed // by webpacks internal loaders. exclude: [/\\.(js|jsx|mjs)$/, /\\.html$/, /\\.json$/], loader: require.resolve('file-loader'), options: &#123; name: 'static/media/[name].[hash:8].[ext]', &#125;,&#125;, 위부분을 막고 아래내용으로 대체해주도록 하자. 1234567891011121314151617181920&#123; test: /\\.jpe?g$|\\.gif$|\\.ico$|\\.png$|\\.svg$/, use: 'file-loader?name=[name].[ext]?[hash]'&#125;,// the following 3 rules handle font extraction&#123; test: /\\.woff(2)?(\\?v=[0-9]\\.[0-9]\\.[0-9])?$/, loader: 'url-loader?limit=10000&amp;mimetype=application/font-woff'&#125;,&#123; test: /\\.(ttf|eot)(\\?v=[0-9]\\.[0-9]\\.[0-9])?$/, loader: 'file-loader'&#125;,&#123; test: /\\.otf(\\?.*)?$/, use: 'file-loader?name=/fonts/[name]. [ext]&amp;mimetype=application/font-otf'&#125; 마무리less버전에 따라 이슈가 발생할 수 있다.필자는 2.7.3 버전에서 정상적으로 작동하는걸 확인하였다. 관련 이슈는 아래링크에서 확인하도록 하자.Make LESS 3.x compatible · Issue #30 · Semantic-Org/Semantic-UI-LESS · GitHub SemanticUI는 Component 종류도 다양하고 사용에도 용이하다.단 전혀 손을대지않으면 폰트사이즈나 간격등이 크거나 맞지않을 수 있기때문에커스터마이징하는 방법에 대해 기록해본다.","categories":[{"name":"React","slug":"React","permalink":"https://y0c.github.io/categories/React/"}],"tags":[{"name":"semantic-ui-react","slug":"semantic-ui-react","permalink":"https://y0c.github.io/tags/semantic-ui-react/"},{"name":"react","slug":"react","permalink":"https://y0c.github.io/tags/react/"}]},{"title":"Javascript Closure란?","slug":"js-closure","date":"2018-09-09T19:50:35.000Z","updated":"2018-09-09T21:33:25.200Z","comments":true,"path":"2018/09/10/js-closure/","link":"","permalink":"https://y0c.github.io/2018/09/10/js-closure/","excerpt":"","text":"javascript 를 공부하다보면 closure라는 개념을 자연스럽게 접하게 된다.이번 포스팅에선 Closure에 대해서 좀 더 깊게 다뤄보려고 한다. Closure 개념에 앞서서 먼저 함수에 대해서 언어별로 처리하고 있는 방법에 대해서 논해보도록 하자. 함수는 언어별로 사용되는 형태의 차이가 있다.예를들면, Java와 같은 언어에서는 함수(메소드)를 문(Statement) 처럼 취급한다.다른 예를보면 C, Javascript, Python, Kotlin, Swift 와 같은 언어를 보면 함수도 일반적인 값(Value)처럼 취급한다. 1급 객체(first-class citizens)1급 객체는 일반적으로 위에서 설명한 함수를 값(Value)처럼 취급하는 언어들에 해당된다. 1급 객체의 조건은 다음과 같다. 변수나 데이터 구조안에 담을 수 있다. 파라미터로 전달할 수 있다. 반환값으로 사용할 수 있다. 여기서 런타임 시에 함수를 생성할 수 있는지 여부에 따라 2급 객체 로 분류하기도 한다. 함수를 1급 객체로 다루는 언어들의 특징함수를 1급 객체로 다루는 언어들의 특징에 대해서 잠시 알아보자. 런타임시에 동적으로 함수를 생성가능 ex) lambda 함수를 값(Value)로 취급 함수가 생성된 환경을 기억하고 있다. 아래 간단한 예시를 보자12345678910111213function makeFunc() &#123; //자유변수(Free Variable) var name = 'Mozilla'; //Closure function displayName() &#123; //지역변수(Local Variable) var v1 = 'test'; alert(name); &#125; return displayName;&#125; 함수가 런타임시에 동적으로 함수를 생성하는 예제이다.여기서 몇가지 개념에 대해 정리하려고 한다.런타임시에 함수를 생성할 수 있는 언어들은 생성된 환경(Context)를 기억하고 있다.함수를 문(Statement)으로 취급하는 언어들은 기본적으로 Global 과 local영역을 참조했다면 참조할 영역이 늘어난 셈이다. displayName 함수 입장에서 상위 함수인 makeFunc의 name도 참조할 수 있어야한다. 여기서 local영역이 아닌 상위 함수의 변수들을 자유변수(Free Variable) 이라고 한다. 그리고 이 자유변수들을 가르키는 함수가 Closure이다. 위 예제에서는 name 자유변수를 사용하고 있는 displayName이 Closure Context 함수가 생성된 환경 Javascript에서는 Lexical Environment라고도 한다. 자유변수(Free Variable) local영역이 아닌 Context 영역의 변수들즉, local에 존재하지 않는 모든 변수를 뜻함 Closure 독립적인 자유변수를 가리키는 함수(자유변수를 가두는 영역) 정리하자면, Closure란 JS에 국한된 개념이 아니라 런타임에 함수가 만들어지는 언어에서는 자유변수 라는 개념이 존재하고 자유변수가 존재하면 필연적으로 Closure 가 발생하게 된다. Closure와 성능일반적으로 함수의 지역변수는 함수가 끝남과 동시에 메모리에서 해제된다.클로저는 위에서 언급했듯이 함수가 생성된 환경(Context)을 기억하고 변수(자유변수)를 참조할 수 있다. 그리고 자유변수를 한 번 이라도 참조했다면 메모리에서 해제되지 않는다. 그러므로 Closure가 필요하지 않은 상황에서 함수내에 함수를 작성하는것은 메모리 소비 측면에서 부정적인 영향을 미친다. Closure와 ScopeES6이전의 JS에서는 오직 function만의 새로운 scope를 생성했다.아래 예시를 보도록 하자.123456789101112131415161718function showHelp(help) &#123; document.getElementById('help').innerHTML = help;&#125;function setupHelp() &#123; var helpText = [ &#123;'id': 'email', 'help': 'Your e-mail address'&#125;, &#123;'id': 'name', 'help': 'Your full name'&#125;, &#123;'id': 'age', 'help': 'Your age (you must be over 16)'&#125; ]; for (var i = 0; i &lt; helpText.length; i++) &#123; var item = helpText[i]; document.getElementById(item.id).onfocus = function() &#123; showHelp(item.help); &#125; &#125;&#125; 대충 훑어보기에는 코드에 문제가 없어보일 수 도 있다.하지만 위 코드는 의도한대로 작동하지 않는다. 모두 age에 관한 도움말을 보여주게된다.코드를 분석해보면 onfocus에는 클로저가 연결되어있다. loop문을 통해 3개의 클로저가 생성되지만 하나의 자유변수(item)를 공유하기 때문이다.(var은 scope 범위가 함수이기 때문에) 해결방법은 클로저를 하나더 생성하는 것이다.클로저를 하나 더 생성함으로 동일한 item이 아닌 각각 다른 item을 가리키게 된다.1234567for (var i = 0; i &lt; helpText.length; i++) &#123; (function(item)&#123; document.getElementById(item.id).onfocus = function() &#123; showHelp(item.help); &#125; &#125;)(helpText[i])&#125; 위와같은 방법이 좀 복잡하다고 느껴진다면 let을 사용하도록 하자.let은 유효범위가 block 즉, 중괄호 이므로 클로저를 추가적으로 만들지 않아도 의도한대로 동작하게 된다. 참고https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide/Closures","categories":[{"name":"Javascript","slug":"Javascript","permalink":"https://y0c.github.io/categories/Javascript/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"https://y0c.github.io/tags/javascript/"},{"name":"Closure","slug":"Closure","permalink":"https://y0c.github.io/tags/Closure/"}]},{"title":"JS의 Generator와 Iterator","slug":"js-generator","date":"2018-09-09T08:43:24.000Z","updated":"2018-09-09T13:48:13.240Z","comments":true,"path":"2018/09/09/js-generator/","link":"","permalink":"https://y0c.github.io/2018/09/09/js-generator/","excerpt":"","text":"ES6의 Generator와 Iterator이번 포스팅에선 ES6의 Generator와 Iterable, Iterator에 대해서 다뤄보려고 한다. Generator를 살펴보기 전에 먼저 Iterable과 Iterator에 대해서 이해하고 넘어가도록 하자. 사실 요즘 왠만한 언어들은 반복(loop)에 대해서 추상화된 방법과 인터페이스를 제공하고 있다. Java를 예로들면 Iterator라는 인터페이스를 제공하고 있다. 이런식의 반복(loop)을 추상화된 인터페이스로 제공할경우 얻을 수 있는 장점은 내장반복이 있는 Array나 Map 과 다르게 사용자 정의 Object나 기본 반복동작이 없는 객체들도 for...of 문으로 동일하게 반복을 정의할 수 있다는 것이다. Iteratoriterator 인터페이스는 반복에 대한 표준화된 방법을 제공한다.구현 방법은 아래와 같다. next() 메소드를 구현 next() 메소드는 IteratorResultObject를 리턴 IteratorResultObject done 과 value를 갖는 객체.여기서 done은 반복의 완료여부 value는 현재 값을 의미 아래 예시는 배열을 인자로 받아서 반복하는 iterator 예시이다.12345678910111213141516//iter 함수는 iterator object를 리턴 const iterator = data =&gt; (&#123; data, next() &#123; return &#123; done: this.data.length == 0, value: this.data.pop() &#125; &#125;&#125;)const arrayIterator = iterator([1,2,3]);console.log(arrayIterator.next().value) // 3console.log(arrayIterator.next().value) // 2console.log(arrayIterator.next().value) // 1 Iterator 만으로는 for…of 구문을 사용할 수 없다.직접 반복에 대한 처리기를 구현해서 사용하거나 추가적으로 Iterable과 같이 사용하여야 한다. Iterableiterable 인터페이스를 구현하면 반복이 가능한 객체를 의미한다.즉, 이 iterable 인터페이스를 구현하면 for...of 문을 통해 반복문을 작성할 수 있게된다.인터페이스 구현은 단지 Symbol.iterator메소드를 만들어주면 된다. 단, 여기서 Symbol.iterator 메소드는 반드시 iterator object를 반환해야 한다. 아래 예시를 보고 좀 더 정확히 이해하도록 하자.123456789101112131415161718const iter = data =&gt; (&#123; //key는 @@iterator로 대체가 가능하다. [Symbol.iterator]()&#123; // iterator object를 반환 return &#123; data, next() &#123; return &#123; done: this.data.length == 0, value: this.data.pop() &#125; &#125; &#125; &#125;&#125;) for(const a of iter([1,2,3])) console.log(a); 위 iterator예제에 추가적으로 iterable 인터페이스를 구현하였다. 이 결과로 내장 반복처리기의 사용이 가능해진다. 내장반복처리기 Array destructuring Spread Rest Parameter For…of Generatorgenerator는 일반적으로 iterator를 쉽게 구현하기 위해 나온 문법으로 알고있다. 하지만 ES6의 generator는 단지 iteraotr를 쉽게 만들어주는 역활만을 한다고 보기는 어렵다. 먼저 코루틴 이라는 개념에 대해 알아보도록 하자. 코루틴 일반적인 함수(루틴)은 Main Flow로 부터 단순히 값을 인자로 받아서 return으로 종료된다. 여기에 return 과 더불어 suspend/resume 기능을 실행할 수 있게해준다. 즉 중단을 걸고 중단된 지점부터 실행을 이어갈 수 있다. generator 문법은 iterator를 통해서 이러한 코루틴을 만들어주는 역활을 한다. yield키워드를 통해서 suspend를 걸 수 있다. next()가 호출되면 resume된다. 위에서 만들었던 예제를 generator로 바꾸면 아래와같이 변경할 수 있다.12345678910const iter = data =&gt; (&#123;//key는 @@iterator로 대체가 가능하다. *[Symbol.iterator]()&#123; let v; while(v=data.pop()) yield v; &#125;&#125;) for(const a of iter([1,2,3])) console.log(a); iterator 를 직접 구현했을 때보다 훨씬 간결하고 편리하게 작성할 수 있다. 이러한 generator 의 사용은 iterator 인터페이스의 구현을 도와주기도 하지만 비동기 코드를 다룰때 매우 유용히 사용할 수 있다. 아래 예시를 보도록 하자123456789101112131415161718192021222324252627282930313233class User &#123; constructor(name, age)&#123; this.name = name; this.age = age; &#125;&#125;const users = [ new User('tony',10), new User('john',20), new User('jang',30)]; const findUser = name =&gt; new Promise((resolve,reject) =&gt; &#123; setTimeout(_ =&gt; &#123; resolve(users.find(v =&gt; v.name == name)); &#125;,1000);&#125;);const submit = user =&gt; new Promise((resolve,reject) =&gt; &#123; setTimeout(_ =&gt; &#123; resolve(&#123; success : true &#125;); &#125;,2000)&#125;);const generator = function*() &#123; let user = yield findUser('tony'); user.name = 'test'; let result = yield submit(user); console.log(result);&#125; 일반적으로 회원을 찾아서 수정한 후 submit하는 코드이다.db를 따로 구현하지 않고 setTimeout 과 Promise 를 통해Fake API를 만들었다. generator를 사용하면 위 예제의 generator 함수와 같이 비동기적인 코드를 동기식으로 표현할 수 있게된다.단, promise를 처리하는 반복처리기를 직접 구현해야한다. 처리기의 내용은 다음과 같다.1234567891011121314151617const promiseIterator = function(gen) &#123; const iterator = gen(); function run(arg) &#123; const result = iterator.next(arg); if( result.done ) &#123; return result.value; &#125; else &#123; return Promise.resolve(result.value).then(run); &#125; &#125; return run();&#125;// 이처럼 사용이 가능하다. promiseIterator(generator()) 이 처리기는 간단하게 promise 반복처리기를 구현한 내용이다.실제 사용은 Co 와 같은 라이브러리를 사용해서 처리하도록 하자. 이러한 generator를 통한 비동기제어는 promise 처리기를 따로 구현하지 않아도 ES7의 async/await syntax를 통해서 좀 더 편리하게 사용할 수 있다. 참고Iteration protocols - JavaScript | MDN반복기 및 생성기 - JavaScript | MDN","categories":[{"name":"Javascript","slug":"Javascript","permalink":"https://y0c.github.io/categories/Javascript/"}],"tags":[{"name":"ES6","slug":"ES6","permalink":"https://y0c.github.io/tags/ES6/"},{"name":"generator","slug":"generator","permalink":"https://y0c.github.io/tags/generator/"},{"name":"iterator","slug":"iterator","permalink":"https://y0c.github.io/tags/iterator/"},{"name":"Javascript","slug":"Javascript","permalink":"https://y0c.github.io/tags/Javascript/"}]},{"title":"Javascript Decorator Pattern","slug":"js-decorator","date":"2018-08-10T13:43:13.000Z","updated":"2018-09-09T21:35:06.058Z","comments":true,"path":"2018/08/10/js-decorator/","link":"","permalink":"https://y0c.github.io/2018/08/10/js-decorator/","excerpt":"","text":"Decorator Pattern의 사전적 정의는 아래와 같다. 주어진 상황 및 용도에 따라 어떤 객체에 특성 혹은 행동을 덧붙이는 패턴 서브클래싱 보다 좀 더 유연한 기능확장을 할 수 있도록 대안으로 쓰임앞서 학습한 Builder Pattern에서는 원하는 속성만 셋팅해서 손쉽게 원하는 객체를 만들어냈다면 Decorator Pattern 을 사용한다면 OCP 원칙에 어긋나지 않게 객체를 원하는기능만 손쉽게 추가할때 용이하다. 먼저 일반적인 Decorator Pattern의 예제를 보자.아래 예제는 Head First 책에서 나오는 예제를 조금 변형해서 Javascript로 작성한 것이다.( 코드 가독성을 위해 ES6 Syntax 로 작성하였다.) 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364class Coffee &#123; getCost() &#123; return 1.0; &#125; getIngredients() &#123; return \"Coffee\"; &#125;&#125;class CoffeeDecorator extends Coffee &#123; constructor(decoraterCoffee) &#123; super(); this.decoraterCoffee = decoraterCoffee; &#125; getCost() &#123; return this.decoraterCoffee.getCost(); &#125; getIngredients() &#123; return this.decoraterCoffee.getIngredients(); &#125; toString() &#123; return `Cost : $&#123;this.getCost()&#125; , Ingredients : $&#123;this.getIngredients()&#125;`; &#125;&#125;class Milk extends CoffeeDecorator &#123; getCost() &#123; return super.getCost() + 0.5; &#125; getIngredients() &#123; return super.getIngredients() + \", Milk\"; &#125;&#125;class Cream extends CoffeeDecorator &#123; getCost() &#123; return super.getCost() + 0.7; &#125; getIngredients() &#123; return super.getIngredients() + \", Cream\"; &#125;&#125;let coffee = new Coffee();let caffeLatte = new Milk(coffee);let caffeMocha = new Cream(milkCoffee);//Inline-Style// let milkCreamCoffee = new Cream( new Milk( new Coffee() ) );console.log(caffeLatte.toString()); // Print -&gt; Cost : 1.5 , Ingredients : Coffee, Milkconsole.log(caffeMocha.toString()); // Print -&gt; Cost : 2.2 , Ingredients : Coffee, Milk, Cream 위 예제는 주어진 재료를 가지고 다양한 형태의 커피를 만드는 예제이다.만약 클래스의 상속을 통해 위 기능을 구현하려 한다면 CaffeeLatte, CaffeeMocha 등커피의 종류가 늘어날수록 클래스를 추가해주어야 할 것이다. 데코레이터 패턴을 적용한다면 위와같이 재료를 정의해놓고 커피를 만들때 필요한 것들만 유연하게 추가하여 커피를 제조할 수 있게된다. Javascript 에서의 Decorator Pattern자바스크립트는 함수형 프로그래밍이 가능하기 때문에 고차 함수(Higher-Order Function)을 통한 Decorator 구현이 가능하다. 실제로 많은 라이브러리나 프레임워크에서도 이와같은 패턴으로 많이 사용되고 있다. 예를 들자면 최근에 React의 Higher Order Component나물론 Express의 Middleware 같은 경우 Decorator Pattern 과 Chain-Of-Responsibility 가 조합된 형태이다. Higher-Order Function 을 이용한 Decoractor 예제123456789101112131415161718192021222324function ajaxRequest(url, method, data) &#123; console.log(`request -&gt; $&#123;url&#125; , $&#123;method&#125;, $&#123;data&#125;`);&#125;function loggerDecorator(func) &#123; return (...args) =&gt; &#123; console.log('Start'); console.log(`Argument : $&#123;args.join(' , ')&#125;`); const result = func.apply(this, args); console.log('End'); return result; &#125;&#125;const request = loggerDecorator(ajaxRequest);request('http://www.naver.com', 'get', 'query=test');//Output//Start//Argument : http://www.naver.com , get , query=test//request -&gt; http://www.naver.com , get, query=test//End 위 예제처럼 ajaxRequset를 하는 함수에 logging을 해주는 decorator를 추가한 예제이다. 이 예제는 정말 간단한 예제이지만 매우 유용하게 사용될 수 있다.전처리, 후처리 공통된 작업을 Decorator를 통해 추가할 수 있고 기능을 손쉽게 확장할 수 있다. ES7 DecoratorECMAScript2016(ES7) 스펙에 추가된 것 중 Decorator라는 문법이 새로 제안되었다. 이 Decorator 문법은class, function, property 모두 어떤 특성이나 행동을 쉽고 깔끔하게 덧붙일 수 있다. 위에서 고차함수를 통해 구현했던 Decorator를 ES7의 Decorator 문법을 통해 아래와 같이 변경해 볼 수 있다.(아래 예제는 log 이외에 권한체크를 하는 decorator를 추가로 구현했다)123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899//log Decoratorfunction log(name) &#123; return function (target, name, descriptor) &#123; const func = descriptor.value; descriptor.value = (...args) =&gt; &#123; console.log('Start'); console.log(`Argument : $&#123;args.join(' , ')&#125;`); const result = func.apply(this, args); return result; &#125; &#125;&#125;//Fake Authconst AuthUtil = &#123; isAuth: () =&gt; &#123; return false; &#125;, roleCheck: (role) =&gt; &#123; let currentUserRole = 'admin'; return role === currentUserRole; &#125;&#125;// Authentication Decoratorfunction Authentication(&#123; isAuth, role&#125;) &#123; return (target, name, descriptor) =&gt; &#123; const func = descriptor.value; descriptor.value = (...args) =&gt; &#123; if (isAuth) &#123; if (!AuthUtil.isAuth()) &#123; throw new Error('Unauthorized Error!!!'); &#125; &#125; if (role) &#123; if (!AuthUtil.roleCheck(role)) &#123; throw new Error('Unauthorized Error!!!'); &#125; &#125; return func.apply(this, args); &#125; &#125;&#125;class Router &#123; @log('index page') index() &#123; console.log('request -&gt; index'); &#125; @log('login page') login() &#123; console.log('request -&gt; login'); &#125; @log('admin page') @Authentication(&#123; isAuth: true, role: 'admin' &#125;) admin() &#123; console.log('request -&gt; admin'); &#125;&#125;const router = new Router();try &#123; router.index('test', 'test2'); router.admin('request admin page...');&#125; catch (e) &#123; console.log(e.message);&#125;//Output /*StartArgument : test , test2request -&gt; indextestStartArgument : request admin page...Unauthorized Error!!!*/ 이 글에선 ES7 Decorator에 대해 자세히 내용을 다루진 않는다.( 파라미터에 대한 설명등은 babel 이나 mdn을 참조하도록 하자) Decorator 자체는 함수이고 이 함수는 원래 함수를 변형시켜 새로운 함수를 만들어서 리턴한다. 아마 위에 Decorator Pattern에 대해 이해했다면 어렵지 않게 이해할 수 있을거라고 생각한다. 위 예제와 같이 logging, auth check, parameter check 등 공통적으로 분리하기 어려운 관심사(Cross-Cutting Concern) 을 깔끔하게 분리해서 구현하고 사용할 수 있다. 최근 React에서도 HOC와 Decorator를 조합해서 위와 비슷한 패턴으로 많이 사용되고 있다고 한다. 추후에 이 조합에 대해서도 다뤄봐야 될 것 같다. 참고ES7의 Decorator문법은 아직 제안 상태이므로 babel 과 함께 사용하여야 정상적으로 작동한다. [링크]Decorators transform · Babel","categories":[{"name":"Javascript","slug":"Javascript","permalink":"https://y0c.github.io/categories/Javascript/"}],"tags":[{"name":"design-pattern","slug":"design-pattern","permalink":"https://y0c.github.io/tags/design-pattern/"},{"name":"javascript","slug":"javascript","permalink":"https://y0c.github.io/tags/javascript/"}]},{"title":"Serverless Koa기반 Api Server 배포하기","slug":"serverless-koa","date":"2018-07-28T15:37:00.000Z","updated":"2018-09-09T21:35:17.884Z","comments":true,"path":"2018/07/29/serverless-koa/","link":"","permalink":"https://y0c.github.io/2018/07/29/serverless-koa/","excerpt":"","text":"이 포스팅에선 aws lambda와 serverless framework를 통해서 koa 기반의 api server를 배포하는 것에 대해 소개하려한다.전체적인 배포 과정을 나열하기보다는 간략한 소개와 boilerplate로 어떤식으로 접근하는지에 중점을 두었다. 필자가 처음 lambda를 접했을땐 토픽별 기능(크롤링, 이미지처리) 이나 AWS와 연계된 서비스에서 모니터링 혹은 알림 같은 곳에 사용할때 유용한 정도로만 생각하고 있었다.lambda에서는 node.js, phtyon, java 등과 같은 여러가지 언어를 제공하고 있지만실제로 api server를 통째로 lambda를 이용하기엔 오히려 불편한점이 꽤 많아 보였기 때문이다. 아래 코드는 AWS lambda 에서 제공하는 nodejs 예시 코드이다.1234567exports.myHandler = function(event, context, callback) &#123; console.log(\"value1 = \" + event.key1); console.log(\"value2 = \" + event.key2); callback(null, \"some success message\"); // or // callback(\"some error type\"); &#125; 위 코드가 하나의 function 즉 endpoint가 된다.단순한 하나의 function 이 아닌 api server를 개발하려면 수 많은 lambda function을 만들어야하기 떄문에 구조가 굉장히 난해해 보였다. 지금껏 express, koa, hapi 와 같은 프레임워크를 통해 backend 개발을 해왔다면 위구조에서 어떤식으로 사용해야될지 잘 감이 오지 않을것이다. 최근에 지인을 통해 serverless-http 모듈에 대해 듣고 잠시 접해볼기회가 있었는데serverless-http는 lambda에 대한 약간의 이해만 있으면 기존에 express나 koa를 통해서 API를 쉽게 Wrap해서 배포할 수 있게된다.실제로 사용해본 경험으론 serverless-http를 사용하게되면 간단한 설치와 몇라인으로 wrapping 할 수 있었다.모듈에대한 자세한 설명은 해당 Repo를 참고하도록 하자.GitHub - dougmoscrop/serverless-http: Use your existing middleware framework (e.g. Express, Koa) in AWS Lambda 🎉 이제 본격적으로 koa 기반 api-server 를 lambda에 배포하는 작업을 해보자.이 작업을 하기위해선 AWS계정과 Serverless 계정이 필요하다.Serverless - The Serverless Application Framework powered by AWS Lambda, API Gateway, and morehttps://aws.amazon.com/ko/ AWS는 계정을 만든후 IAM을 통해 user를 만든후 access_key 와 secret_key가 필요하다. 이 과정에 대해선 아래 글에 자세히 설명되있으니 참조하도록 하자.serverless/credentials.md at master · serverless/serverless · GitHub 먼저, serverless 를 설치한다.npm install -g serverless 아래 명령어는 aws nodejs용 템플릿을 만들어주는데 틀을 보고 필요한 부분은 찾아서 작성하도록한다.serverless create -t aws-nodejs koa기반 app 을 배포할것이기 때문에 serverless-http 모듈도 설치하도록 하자.npm install serverless-http 여기까지 됬다면 기본적인 앱을 배포하는데 기본적인 준비가 끝난 것이다.기존 koa app을 개발하는 구조와 동일하게 사용하여도 무방하다.serverless 배포를 위해 작성해야될 코드는 아래가 전부이다.12345import serverless from 'serverless-http';import app from 'app';// handler는 serverless yml 파일에서 지정해준 이름을 사용하여야한다. export const handler = serverless(app); app을 배포할때는 sls deploy —stage &lt;stage_name&gt; 을 통해서 배포할 수 있다. 사용해본 후기로 생각보다 간단하게 koa 혹은 express app을 lambda로 배포할 수 있었다. 앞으로도 간단한 api server 를 구성할때 자주 사용하게 될 것 같다. express 기반 boilerplate는 검색하면 바로나오는 편인데 koa 관련해서는 boilerplate가 적당한게 보이지않아서 연습하면서 간단하게 boilerplate를 구성해보았다. GitHub - y0c/serverless-koa-boilerplate: Serverless-http with Koa Boilerplate ES6/7 Syntax를 사용할 수 있도록 babel 과 serverless-webpack 관련 설정을 추가된 boilerplate 이다.","categories":[{"name":"serverless","slug":"serverless","permalink":"https://y0c.github.io/categories/serverless/"}],"tags":[{"name":"serverless","slug":"serverless","permalink":"https://y0c.github.io/tags/serverless/"},{"name":"serverless-http","slug":"serverless-http","permalink":"https://y0c.github.io/tags/serverless-http/"},{"name":"koa","slug":"koa","permalink":"https://y0c.github.io/tags/koa/"}]},{"title":"React Component 생명주기","slug":"React-Component-생명주기","date":"2018-01-05T23:53:57.000Z","updated":"2018-09-09T13:47:47.574Z","comments":true,"path":"2018/01/06/React-Component-생명주기/","link":"","permalink":"https://y0c.github.io/2018/01/06/React-Component-생명주기/","excerpt":"","text":"목차 Component LifeCycle - Mounting Component LifeCycle - Updating Component LifeCycle - Unmounting Web Service, Mobile App 또는 다른 Application을 개발해봤다면 생명주기 라는말을 한 번쯤 들어보았을 것이다. 혹시 들어보지 못했더라도 전혀 상관없다!생명주기란 Application 이 시작, 실행, 활성, 비활성, 정지, 종료 등 일련의 상태를 순환하는데 이것을 생명주기라고 한다. React 에서도 마찬가지로 Component가 생성, 수정, 소멸 크게 3가지 부분으로 나뉘어서 LifeCycle API 가 제공되고 있는데. 이것들을 기억해두셨다가 개발도중에 필요할때 적절하게 구현해놓고 사용하면 된다. Component LifeCycle - Mounting 컴포넌트가 생성될때 호출되는 LifeCycle API 이다.생성자 메소드의 경우 ES6를 사용하지 않는다면 getInitialState 메소드를 사용하실 수 있고 더 자세한 내용은 React 공식문서 React Without ES6 를 참고하도록 하자. Component LifeCycle - Updating 컴포넌트가 생성될때 호출되는 LifeCycle API 이다.여기서 shouldComponentUpdate 메소드는 중요한 역활을 한다.이 메소드에서 변경된 props와 state를 통해 리렌더링을 할지 여부를 결정하게 되는데 기본적으로 true를 리턴하게 되있는데 false를 리턴할경우 렌더링을 하지 않는다. 123shouldComponentUpdate( nextProps, nextState ) &#123; return nextProps.list !== this.props.list&#125; 위 코드는 shouldComponentUpdate를 통해 이전 props와 변경될 props를 비교해서 렌더링 여부를 결정하는 예시이다. 여기서 기억해두어야할 점은 React에서는deep checking이나 JSON.stringfiy() 메소드를 통한 비교는 권장하지 않는다는 것이다.이는 비효율적이고 성능에 영향을 끼치기 때문에 일반적으로 shallow checking을 사용하고 있다. deep checking , shallow checking, immutable fashion 에 관해서는 다른 글을 통해서 더 자세히 다뤄볼 수 있도록 준비할 예정이다. React.PureComponent를 상속받게되면 props와 state에 대해 shallow compare로직이 들어가 있어서 좀 더 편리하게 사용할 수 있다고 한다.하지만 무분별하게 PureComponent를 상속받아서 사용한다면 오히려 성능저하를 야기할 수 있고 적절히 필요한곳에 shouldComponentUpdate를 구현하여 사용하시는 것이 좋은 방법이라고 생각된다. 그리고 설사 shouldComponentUpdate를 구현하지 않아서 무조건 true를 리턴하는 상황이 있다고 하더라도 React는 모든경우에 리렌더링을 하지는 않는다. shouldComponentUpdate를 통해 true를 리턴하게 되면 기존 Vitural DOM과 변경된 props나 state를 통해 만들어질 Vitural DOM과 비교하여 변경된 내용이 없다면 리렌더링을 하지 않는다. 하지만 규모가 커질수록 큰 성능 차이를 낼 수 있기 때문에 최적화 하는 습관을 들여놓는게 좋다고 생각한다. Component LifeCycle - Unmounting 컴포넌트가 소멸될시 호출되는 LifeCycle API입니다.위 설명과 같이 타이머 제거, 네트워크 요청취소, 이벤트 리스너 제거등에 주로 사용된다. 개인 공부용으로 쓴 글이라 혹시 잘못된 정보가 있다면 댓글로 알려주시면 수정하도록하겠습니다.","categories":[{"name":"React","slug":"React","permalink":"https://y0c.github.io/categories/React/"}],"tags":[{"name":"React","slug":"React","permalink":"https://y0c.github.io/tags/React/"}]},{"title":"React Event Handling","slug":"React-Event-Handling","date":"2018-01-03T14:30:05.000Z","updated":"2018-09-09T13:47:47.579Z","comments":true,"path":"2018/01/03/React-Event-Handling/","link":"","permalink":"https://y0c.github.io/2018/01/03/React-Event-Handling/","excerpt":"","text":"목차 React 와 일반적인 DOM element 에서 이벤트 핸들링의 차이 React에서 Event를 바인딩하는 여러가지 방법 SyntheticEvent React 와 일반적인 DOM element 에서 이벤트 핸들링의 차이React에서 이벤트를 핸들링하는 방법은 DOM elements의 이벤트를 핸들링 하는 방법과 매우 유사하다. 아래 가장 기본적인 예시를 보도록 하자.먼저 일반적인 DOM Element의 바인딩 하는 방법이다.123&lt;button onclick=\"activeLasers()\"&gt; Activate Lasers&lt;/button&gt; 위와 같이 표현할 수 있다. 같은 역활을 하는 Element를 React Way로 표현하면 다음과 같다.123&lt;button onClick=&#123;this.activeLaser&#125;&gt; Activate Lasers&lt;/button&gt; 첫 번째 차이점은 React에서는 Event를 CamelCase를 사용하여 표기한다는 점이다.두번째로 일반적인 DOM에서 이벤트를 바인딩 할 때에는 function을 직접 호출하지만 React는 이벤트를 직접 호출하지않고 function을 지정해주기만 한다.(즉 function 의 포인터 만 넘겨주고 직접 핸들링하지 않는다.) return false; 에 관해DOM element에 이벤트를 바인딩 한 경험이 있다면 return false; 를 많이 사용해봤을 것이다. 이 return false;의 역활은 브라우저의 기본동작을 막아주도록 동작한다.즉 event.preventDefault와 같은 역활을 한다고 볼 수 있다. 같은 syntax 를 jQuery event handler 안에서 사용할 경우event.preventdefault() 와 event.stopPropagation()을 동시에 처리해준다. 하지만 React의 경우 return false와 같은 syntax는 아무 동작을 하지 않는다.반드시 기본동작이나 버블링을 제어할 시에는 명시적으로 event.preventDefault()event.stopPropagation()을 작성해주어야 한다. React 에서 Event를 바인딩하는 여러가지 방법에 관하여Event Handler 에서 thisES6 Class syntax를 사용하여 React Component를 작성한 경우 event handler에서 this는 undefined가 된다. 왜냐하면 javascript에서 this는 호출한 context에 의해 결정되기 때문이다.만약 잘 이해가 가지 않는다면 아래 문서를 참고하도록 하자. this - JavaScript | MDN 이러한 this 에 관한 이슈로 인해 this를 이벤트 핸들러가 아닌 클래스에 바인딩 할 수 있는 몇가지 방법을 소개해볼까한다. 1. React.createClassReact 의 createClass 메소드를 사용하여 컴포넌트를 제작할경우 react는 모든 함수를 this에 자동으로 바인딩한다.즉 따로 바인딩 할 필요가 없지만 React.createClass syntax는 조만간 이후 버전의 릴리즈에서 추출 될 수 있으므로 지양하는 것이 좋다. 2. Rendering 시 바인딩1onChange=&#123;this.handleChange.bind(this)&#125; 위와 같이 렌더링시에 바로 this에 바인딩 해주는 방법도 있는데 이는 렌더링이 실행될때마다 새로운 함수를 만들어주기 때문에 퍼포먼스에 좋지 않다고 한다. 3. Constructor를 통한 바인딩1234constructor(props) &#123; super(props); this.handleChange = this.handleChange.bind(this);&#125; 생성자 함수에서 함수를 바인딩해주는 방법이다. 생성자 호출 될시 한번만 바인딩 되므로 퍼포먼스 이슈가 없고 React에서 권장하는 가장 일반적인 방법인데이벤트 핸들러가 많아지면 바인딩을 못한 휴먼에러가 생길 수 있고 매 번 바인딩을 하는 것은 꽤나 부담스럽고 귀찮은 작업이 될 수도 있다. 4. Class Property 의 Arrow Function 을 통한 바인딩123handleChange = () =&gt; &#123;&#125; 위와 같은 방법은 가장 심플하게 함수를 클래스에 바인딩 할 수 있는 방법을 제공하는데해당 syntax를 사용하기 위해서는 babel state-2 혹은 transfrom-class-properties 가 추가되있어야 정상적으로 동작한다. 참고123456789101112131415161718192021222324class Bork &#123; //Property initializer syntax instanceProperty = \"bork\"; boundFunction = () =&gt; &#123; return this.instanceProperty; &#125; //Static class properties static staticProperty = \"babelIsCool\"; static staticFunction = function() &#123; return Bork.staticProperty; &#125; &#125; let myBork = new Bork; //Property initializers are not on the prototype. console.log(myBork.__proto__.boundFunction); // &gt; undefined //Bound functions are bound to the class instance. console.log(myBork.boundFunction.call(undefined)); // &gt; \"bork\" //Static function exists on the class. console.log(Bork.staticFunction()); // &gt; \"babelIsCool\" 위 코드는 babel 공식문서에서 발췌한 코드이다.Class properties transform · Babel 코드에 있는 설명에는 Property initializer 를 통한 Arrow Function은 Prototype에 추가되지 않는다. 즉, Prototype 에 추가되지 않는 다는 의미는 클래스가 생성될때마다 메모리 공간을 차지하고 상속을 하지 못하는 문제점이 존재한다. 개인적인 생각으로는 이벤트 핸들러는 React Component 중에서도 주로 컨테이너 즉 Statefull Component 에 주로 바인딩 되고 props를 통해서 하위 컴포넌트로 핸들러를 전달한다. 컨테이너 특성상 자주 생성되지 않고 이벤트 핸들러는 일반적으로 상속이 자주 사용되지 않아서 단점보다 auto-binding을 통한 편리함과 장점이 크다고 생각하기 때문에 앞으로도 위와 같은 syntax를 자주 사용할 것 같다.저런 방법 마저 마음에 들지 않는다면 react-autobind, autobind-decorator 와 같은 라이브러리들이 있으니 참고하도록 하자. SyntheticEventReact 에서는 DOM 이벤트를 직접다루지 않고 이를 Wrapping한 SyntheticEvent를 사용한다. 이 SyntheticEvent 를 사용함으로써 브라우저마다 다른 event 객체에 대해 신경쓸 필요가 없다! 즉 크로스 브라우징에 관한 이슈가 해결된다.SyntheticEvent 에 관한 속성들은 따로 언급하진 않겠다.DOM 이벤트와 완벽하게 매칭되는게 아니므로 찾아볼 게 있을때는 React 공식문서를 참조하도록 하자.SyntheticEvent - React 개인 공부용으로 쓴 글이라 혹시 잘못된 정보가 있다면 댓글로 알려주시면 수정하도록하겠습니다.","categories":[{"name":"React","slug":"React","permalink":"https://y0c.github.io/categories/React/"}],"tags":[{"name":"React","slug":"React","permalink":"https://y0c.github.io/tags/React/"},{"name":"Event Handling","slug":"Event-Handling","permalink":"https://y0c.github.io/tags/Event-Handling/"}]}]}