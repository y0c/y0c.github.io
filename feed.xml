<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lazy Developer</title>
  
  
  <link href="/feed.xml" rel="self"/>
  
  <link href="https://y0c.github.io/"/>
  <updated>2018-07-28T16:05:20.235Z</updated>
  <id>https://y0c.github.io/</id>
  
  <author>
    <name>HoSung</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Serverless Koa기반 Api Server 배포하기</title>
    <link href="https://y0c.github.io/2018/07/29/serverless-koa/"/>
    <id>https://y0c.github.io/2018/07/29/serverless-koa/</id>
    <published>2018-07-28T15:37:00.000Z</published>
    <updated>2018-07-28T16:05:20.235Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/serverless.png"/><p>이 포스팅에선 aws lambda와 serverless framework를 통해서 koa 기반의 api server를 배포하는 것에 대해 소개하려한다.<br>전체적인 배포 과정을 나열하기보다는 간략한 소개와 boilerplate로 어떤식으로 접근하는지에 중점을 두었다. </p><p>필자가 처음 lambda를 접했을땐 토픽별 기능(크롤링, 이미지처리) 이나 AWS와 연계된 서비스에서 모니터링 혹은 알림 같은 곳에 사용할때 유용한 정도로만 생각하고 있었다.<br>lambda에서는 node.js, phtyon, java 등과 같은 여러가지 언어를 제공하고 있지만<br>실제로 api server를 통째로 lambda를 이용하기엔 오히려 불편한점이 꽤 많아 보였기 때문이다. </p><p>아래 코드는 AWS lambda 에서 제공하는  nodejs 예시 코드이다.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">exports.myHandler = <span class="function"><span class="keyword">function</span>(<span class="params">event, context, callback</span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"value1 = "</span> + event.key1);</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"value2 = "</span> + event.key2);  </span><br><span class="line">   callback(<span class="literal">null</span>, <span class="string">"some success message"</span>);</span><br><span class="line">   <span class="comment">// or </span></span><br><span class="line">   <span class="comment">// callback("some error type"); </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>위 코드가 하나의 function 즉 endpoint가 된다.<br>단순한 하나의 function 이 아닌 api server를 개발하려면 수 많은 lambda function을 만들어야하기 떄문에 구조가 굉장히 난해해 보였다. </p><p>지금껏 express, koa, hapi 와 같은 프레임워크를 통해 backend 개발을 해왔다면  위구조에서 어떤식으로 사용해야될지 잘 감이 오지 않을것이다. </p><p>최근에 지인을 통해 serverless-http 모듈에 대해 듣고 잠시 접해볼기회가 있었는데<br>serverless-http는 lambda에 대한 약간의 이해만 있으면 기존에 express나 koa를 통해서 API를 쉽게 Wrap해서 배포할 수 있게된다.<br>실제로 사용해본 경험으론 serverless-http를 사용하게되면 간단한 설치와 몇라인으로 wrapping 할 수 있었다.<br>모듈에대한 자세한 설명은 해당 Repo를 참고하도록 하자.<br><a href="https://github.com/dougmoscrop/serverless-http" rel="external nofollow noopener noreferrer" target="_blank">GitHub - dougmoscrop/serverless-http: Use your existing middleware framework (e.g. Express, Koa) in AWS Lambda 🎉</a></p><p>이제 본격적으로  koa 기반 api-server 를 lambda에 배포하는 작업을 해보자.<br>이 작업을 하기위해선 AWS계정과 Serverless 계정이 필요하다.<br><a href="https://serverless.com/" rel="external nofollow noopener noreferrer" target="_blank">Serverless - The Serverless Application Framework powered by AWS Lambda, API Gateway, and more</a><br><a href="https://aws.amazon.com/ko/" rel="external nofollow noopener noreferrer" target="_blank">https://aws.amazon.com/ko/</a></p><p>AWS는 계정을 만든후  IAM을 통해 user를 만든후 <code>access_key</code> 와 <code>secret_key</code>가 필요하다. 이 과정에 대해선 아래 글에 자세히 설명되있으니 참조하도록 하자.<br><a href="https://github.com/serverless/serverless/blob/master/docs/providers/aws/guide/credentials.md" rel="external nofollow noopener noreferrer" target="_blank">serverless/credentials.md at master · serverless/serverless · GitHub</a></p><p>먼저, serverless 를 설치한다.<br><code>npm install -g serverless</code></p><p>아래 명령어는 aws nodejs용 템플릿을 만들어주는데 틀을 보고 필요한 부분은 찾아서 작성하도록한다.<br><code>serverless create -t aws-nodejs</code> </p><p>koa기반 app 을 배포할것이기 때문에 serverless-http 모듈도 설치하도록 하자.<br><code>npm install serverless-http</code> </p><p>여기까지 됬다면  기본적인 앱을 배포하는데 기본적인 준비가 끝난 것이다.<br>기존 koa app을 개발하는 구조와 동일하게 사용하여도 무방하다.<br>serverless 배포를 위해 작성해야될 코드는 아래가 전부이다.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> serverless <span class="keyword">from</span> <span class="string">'serverless-http'</span>;</span><br><span class="line"><span class="keyword">import</span> app <span class="keyword">from</span> <span class="string">'app'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// handler는 serverless yml 파일에서 지정해준 이름을 사용하여야한다. </span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> handler = serverless(app);</span><br></pre></td></tr></table></figure></p><p>app을 배포할때는 <code>sls deploy —stage &lt;stage_name&gt;</code> 을 통해서 배포할 수 있다. </p><p>사용해본 후기로 생각보다 간단하게 koa 혹은 express app을 lambda로 배포할 수 있었다. 앞으로도 간단한 api server 를 구성할때 자주 사용하게 될 것 같다. </p><p>express 기반 boilerplate는 검색하면 바로나오는 편인데 koa 관련해서는 boilerplate가 적당한게 보이지않아서 연습하면서 간단하게 boilerplate를 구성해보았다.  </p><p><a href="https://github.com/y0c/serverless-koa-boilerplate" rel="external nofollow noopener noreferrer" target="_blank">GitHub - y0c/serverless-koa-boilerplate: Serverless-http with Koa Boilerplate</a></p><p>ES6/7 Syntax를 사용할 수 있도록 babel 과 serverless-webpack 관련 설정을 추가된 boilerplate 이다. </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/images/serverless.png&quot;/&gt;&lt;p&gt;이 포스팅에선 aws lambda와 serverless framework를 통해서 koa 기반의 api server를 배포하는 것에 대해 소개하려한다.&lt;br&gt;전체적인 배포 과정을 나열
      
    
    </summary>
    
      <category term="serverless" scheme="https://y0c.github.io/categories/serverless/"/>
    
    
      <category term="serverless" scheme="https://y0c.github.io/tags/serverless/"/>
    
      <category term="serverless-http" scheme="https://y0c.github.io/tags/serverless-http/"/>
    
      <category term="koa" scheme="https://y0c.github.io/tags/koa/"/>
    
  </entry>
  
  <entry>
    <title>React Component 생명주기</title>
    <link href="https://y0c.github.io/2018/01/06/React-Component-%EC%83%9D%EB%AA%85%EC%A3%BC%EA%B8%B0/"/>
    <id>https://y0c.github.io/2018/01/06/React-Component-생명주기/</id>
    <published>2018-01-05T23:53:57.000Z</published>
    <updated>2018-01-05T23:59:05.874Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/react.jpg"/><hr><h1 id="목차"><a href="#목차" class="headerlink" title="목차"></a>목차</h1><ol><li><a href="#mounting">Component LifeCycle - Mounting</a></li><li><a href="#updating">Component LifeCycle - Updating</a></li><li><a href="#unmounting">Component LifeCycle - Unmounting</a></li></ol><hr><p>Web Service, Mobile App 또는 다른 Application을 개발해봤다면 <code>생명주기</code> 라는말을 한 번쯤 들어보았을 것이다.  혹시 들어보지 못했더라도 전혀 상관없다!<br>생명주기란 Application 이 시작, 실행, 활성, 비활성, 정지, 종료 등 일련의 상태를 순환하는데 이것을 생명주기라고 한다.</p><p>React 에서도 마찬가지로 Component가 <code>생성</code>, <code>수정</code>, <code>소멸</code> 크게 3가지 부분으로 나뉘어서  LifeCycle API 가 제공되고 있는데. 이것들을 기억해두셨다가 개발도중에 필요할때 적절하게 구현해놓고 사용하면 된다.</p><div id="mounting"><br></div><h2 id="Component-LifeCycle-Mounting"><a href="#Component-LifeCycle-Mounting" class="headerlink" title="Component LifeCycle - Mounting"></a>Component LifeCycle - Mounting</h2><img src="/2018/01/06/React-Component-생명주기/mounting.png" title="React LifeCycle Mounting"><p>컴포넌트가 생성될때 호출되는 LifeCycle API 이다.<br>생성자 메소드의 경우 ES6를 사용하지 않는다면 <code>getInitialState</code> 메소드를 사용하실 수 있고 더 자세한 내용은 React 공식문서 <a href="https://reactjs.org/docs/react-without-es6.html" rel="external nofollow noopener noreferrer" target="_blank">React Without ES6</a> 를 참고하도록 하자.</p><div id="updating"><br></div><h2 id="Component-LifeCycle-Updating"><a href="#Component-LifeCycle-Updating" class="headerlink" title="Component LifeCycle - Updating"></a>Component LifeCycle - Updating</h2><img src="/2018/01/06/React-Component-생명주기/updating.png" title="React LifeCycle Updating"><p>컴포넌트가 생성될때 호출되는 LifeCycle API 이다.<br>여기서 <em>shouldComponentUpdate</em> 메소드는 중요한 역활을 한다.<br><strong>이 메소드에서 변경된 props와 state를 통해 리렌더링을 할지 여부를 결정하게 되는데 기본적으로 true를 리턴하게 되있는데 false를 리턴할경우 렌더링을 하지 않는다.</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">shouldComponentUpdate( nextProps, nextState ) &#123;</span><br><span class="line">    <span class="keyword">return</span> nextProps.list !== <span class="keyword">this</span>.props.list</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위 코드는 shouldComponentUpdate를 통해 이전 props와 변경될 props를 비교해서 렌더링 여부를 결정하는 예시이다. 여기서 기억해두어야할 점은 React에서는<br><code>deep checking</code>이나 <code>JSON.stringfiy()</code> 메소드를 통한 비교는 권장하지 않는다는 것이다.<br>이는 비효율적이고 성능에 영향을 끼치기 때문에 일반적으로 <code>shallow checking</code>을 사용하고 있다. <code>deep checking</code> , <code>shallow checking</code>, <code>immutable fashion</code> 에 관해서는 다른 글을 통해서 더 자세히 다뤄볼 수 있도록 준비할 예정이다.</p><p><code>React.PureComponent</code>를 상속받게되면 props와 state에 대해 shallow compare로직이 들어가 있어서 좀 더 편리하게 사용할 수 있다고 한다.<br>하지만 무분별하게 PureComponent를 상속받아서 사용한다면 오히려 성능저하를 야기할 수 있고 적절히 필요한곳에 shouldComponentUpdate를 구현하여 사용하시는 것이 좋은 방법이라고 생각된다.</p><p>그리고 설사 shouldComponentUpdate를 구현하지 않아서 무조건 true를 리턴하는 상황이 있다고 하더라도 React는 모든경우에 리렌더링을 하지는 않는다. shouldComponentUpdate를 통해 true를 리턴하게 되면 기존 Vitural DOM과 변경된 props나 state를 통해 만들어질 Vitural DOM과 비교하여 변경된 내용이 없다면 리렌더링을 하지 않는다.</p><p>하지만 규모가 커질수록 큰 성능 차이를 낼 수 있기 때문에 최적화 하는 습관을 들여놓는게 좋다고 생각한다.</p><div id="unmounting"><br></div><h2 id="Component-LifeCycle-Unmounting"><a href="#Component-LifeCycle-Unmounting" class="headerlink" title="Component LifeCycle - Unmounting"></a>Component LifeCycle - Unmounting</h2><img src="/2018/01/06/React-Component-생명주기/unmounting.png" title="React LifeCycle Unmounting"><p>컴포넌트가 소멸될시 호출되는 LifeCycle API입니다.<br>위 설명과 같이 타이머 제거, 네트워크 요청취소, 이벤트 리스너 제거등에 주로 사용된다.</p><h3 id="개인-공부용으로-쓴-글이라-혹시-잘못된-정보가-있다면-댓글로-알려주시면-수정하도록하겠습니다"><a href="#개인-공부용으로-쓴-글이라-혹시-잘못된-정보가-있다면-댓글로-알려주시면-수정하도록하겠습니다" class="headerlink" title="개인 공부용으로 쓴 글이라 혹시 잘못된 정보가 있다면 댓글로 알려주시면 수정하도록하겠습니다."></a>개인 공부용으로 쓴 글이라 혹시 잘못된 정보가 있다면 댓글로 알려주시면 수정하도록하겠습니다.</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/images/react.jpg&quot;/&gt;&lt;hr&gt;
&lt;h1 id=&quot;목차&quot;&gt;&lt;a href=&quot;#목차&quot; class=&quot;headerlink&quot; title=&quot;목차&quot;&gt;&lt;/a&gt;목차&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#mounting&quot;&gt;Component
      
    
    </summary>
    
      <category term="React" scheme="https://y0c.github.io/categories/React/"/>
    
    
      <category term="React" scheme="https://y0c.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>React Event Handling</title>
    <link href="https://y0c.github.io/2018/01/03/React-Event-Handling/"/>
    <id>https://y0c.github.io/2018/01/03/React-Event-Handling/</id>
    <published>2018-01-03T14:30:05.000Z</published>
    <updated>2018-01-05T23:59:05.878Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/react.jpg"/><hr><h1 id="목차"><a href="#목차" class="headerlink" title="목차"></a>목차</h1><ol><li><a href="#react-dom-difference">React 와 일반적인  DOM element 에서 이벤트 핸들링의 차이</a></li><li><a href="#react-event-bind-method">React에서 Event를 바인딩하는 여러가지 방법</a></li><li><a href="#react-synthetic-event">SyntheticEvent</a></li></ol><hr><div id="react-dom-difference"><br></div><h2 id="React-와-일반적인-DOM-element-에서-이벤트-핸들링의-차이"><a href="#React-와-일반적인-DOM-element-에서-이벤트-핸들링의-차이" class="headerlink" title="React 와 일반적인  DOM element 에서 이벤트 핸들링의 차이"></a>React 와 일반적인  DOM element 에서 이벤트 핸들링의 차이</h2><p>React에서 이벤트를 핸들링하는 방법은 DOM elements의 이벤트를 핸들링 하는 방법과 매우 유사하다.  아래 가장 기본적인 예시를 보도록 하자.<br>먼저 일반적인 <code>DOM Element</code>의 바인딩 하는 방법이다.<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"activeLasers()"</span>&gt;</span></span><br><span class="line">Activate Lasers</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>위와 같이 표현할 수 있다.</p><p>같은 역활을 하는 Element를 <code>React Way</code>로 표현하면 다음과 같다.<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.activeLaser&#125;</span>&gt;</span></span><br><span class="line">Activate Lasers</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>첫 번째 차이점은 React에서는 Event를 <em>CamelCase</em>를 사용하여 표기한다는 점이다.<br>두번째로 일반적인 DOM에서 이벤트를 바인딩 할 때에는 function을 직접 호출하지만 React는 이벤트를 직접 호출하지않고 function을 지정해주기만 한다.<br>(즉 function 의 포인터 만 넘겨주고 직접 핸들링하지 않는다.)</p><h3 id="return-false-에-관해"><a href="#return-false-에-관해" class="headerlink" title="return false; 에 관해"></a>return false; 에 관해</h3><p>DOM element에 이벤트를 바인딩 한 경험이 있다면 <code>return false;</code> 를 많이 사용해봤을 것이다. 이 <code>return false;</code>의 역활은 브라우저의 기본동작을 막아주도록 동작한다.<br>즉 <code>event.preventDefault</code>와 같은 역활을 한다고 볼 수 있다.</p><p>같은 syntax 를 jQuery event handler 안에서 사용할 경우<br><code>event.preventdefault()</code> 와 <code>event.stopPropagation()</code>을 동시에 처리해준다.</p><p><strong>하지만 React의 경우 return false와 같은 syntax는 아무 동작을 하지 않는다.</strong><br>반드시 기본동작이나 버블링을 제어할 시에는 명시적으로 <code>event.preventDefault()</code><br><code>event.stopPropagation()</code>을 작성해주어야 한다.</p><hr><div id="react-event-bind-method"><br></div><h2 id="React-에서-Event를-바인딩하는-여러가지-방법에-관하여"><a href="#React-에서-Event를-바인딩하는-여러가지-방법에-관하여" class="headerlink" title="React 에서 Event를 바인딩하는 여러가지 방법에 관하여"></a>React 에서 Event를 바인딩하는 여러가지 방법에 관하여</h2><p><strong>Event Handler 에서 this</strong><br>ES6 Class syntax를 사용하여 React Component를 작성한 경우 event handler에서 this는 undefined가 된다. 왜냐하면 javascript에서 this는 호출한 context에 의해 결정되기 때문이다.<br>만약 잘 이해가 가지 않는다면 아래 문서를 참고하도록 하자.</p><p><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/this" rel="external nofollow noopener noreferrer" target="_blank">this - JavaScript | MDN</a></p><p>이러한 this 에 관한 이슈로 인해 this를 이벤트 핸들러가 아닌 클래스에 바인딩 할 수 있는 몇가지 방법을 소개해볼까한다.</p><p><strong>1. React.createClass</strong><br>React 의 createClass 메소드를 사용하여 컴포넌트를 제작할경우 react는 모든 함수를 this에 자동으로 바인딩한다.<br>즉 따로 바인딩 할 필요가 없지만 React.createClass syntax는 조만간 이후 버전의 릴리즈에서 추출 될 수 있으므로 지양하는 것이 좋다.</p><p><strong>2. Rendering 시 바인딩</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">onChange=&#123;<span class="keyword">this</span>.handleChange.bind(<span class="keyword">this</span>)&#125;</span><br></pre></td></tr></table></figure></p><p>위와 같이 렌더링시에 바로 this에 바인딩 해주는 방법도 있는데 이는 렌더링이 실행될때마다 새로운 함수를 만들어주기 때문에 퍼포먼스에 좋지 않다고 한다.</p><p><strong>3. Constructor를 통한 바인딩</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">  <span class="keyword">super</span>(props);</span><br><span class="line">  <span class="keyword">this</span>.handleChange = <span class="keyword">this</span>.handleChange.bind(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>생성자 함수에서 함수를 바인딩해주는 방법이다. 생성자 호출 될시 한번만 바인딩 되므로 퍼포먼스 이슈가 없고 React에서 권장하는 가장 일반적인 방법인데<br>이벤트 핸들러가 많아지면 바인딩을 못한 휴먼에러가 생길 수 있고 매 번 바인딩을 하는 것은 꽤나 부담스럽고 귀찮은 작업이 될 수도 있다.</p><p><strong>4. Class Property 의 Arrow Function 을 통한 바인딩</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">handleChange = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>위와 같은 방법은 가장 심플하게 함수를 클래스에 바인딩 할 수 있는 방법을 제공하는데<br>해당 syntax를 사용하기 위해서는 babel <em>state-2</em> 혹은 <em>transfrom-class-properties</em> 가 추가되있어야 정상적으로 동작한다.</p><p><em>참고</em><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bork</span> </span>&#123;</span><br><span class="line">   <span class="comment">//Property initializer syntax</span></span><br><span class="line">   instanceProperty = <span class="string">"bork"</span>;</span><br><span class="line">   boundFunction = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">this</span>.instanceProperty;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//Static class properties</span></span><br><span class="line">   <span class="keyword">static</span> staticProperty = <span class="string">"babelIsCool"</span>;</span><br><span class="line">   <span class="keyword">static</span> staticFunction = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> Bork.staticProperty;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">let</span> myBork = <span class="keyword">new</span> Bork;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//Property initializers are not on the prototype.</span></span><br><span class="line"> <span class="built_in">console</span>.log(myBork.__proto__.boundFunction); <span class="comment">// &gt; undefined</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">//Bound functions are bound to the class instance.</span></span><br><span class="line"> <span class="built_in">console</span>.log(myBork.boundFunction.call(<span class="literal">undefined</span>)); <span class="comment">// &gt; "bork"</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">//Static function exists on the class.</span></span><br><span class="line"> <span class="built_in">console</span>.log(Bork.staticFunction()); <span class="comment">// &gt; "babelIsCool"</span></span><br></pre></td></tr></table></figure></p><p> 위 코드는 babel 공식문서에서 발췌한 코드이다.<br><a href="https://babeljs.io/docs/plugins/transform-class-properties/" rel="external nofollow noopener noreferrer" target="_blank">Class properties transform · Babel</a></p><p>코드에 있는 설명에는 Property initializer 를 통한 Arrow Function은 Prototype에 추가되지 않는다. 즉, Prototype 에 추가되지 않는 다는 의미는 클래스가 생성될때마다 메모리 공간을 차지하고 상속을 하지 못하는 문제점이 존재한다.</p><p>개인적인 생각으로는 이벤트 핸들러는 React Component 중에서도 주로 컨테이너 즉 Statefull Component 에 주로 바인딩 되고 props를 통해서 하위 컴포넌트로 핸들러를 전달한다. 컨테이너 특성상 자주 생성되지 않고 이벤트 핸들러는 일반적으로 상속이 자주 사용되지 않아서 단점보다 auto-binding을 통한 편리함과 장점이 크다고 생각하기 때문에 앞으로도 위와 같은 syntax를 자주 사용할 것 같다.<br>저런 방법 마저 마음에 들지 않는다면 <code>react-autobind</code>, <code>autobind-decorator</code> 와 같은 라이브러리들이 있으니 참고하도록 하자.</p><hr><div id="react-synthetic-event"><br></div><h2 id="SyntheticEvent"><a href="#SyntheticEvent" class="headerlink" title="SyntheticEvent"></a>SyntheticEvent</h2><p>React 에서는 DOM 이벤트를 직접다루지 않고 이를 Wrapping한 <code>SyntheticEvent</code>를 사용한다. 이 <code>SyntheticEvent</code> 를 사용함으로써 <strong>브라우저마다 다른 event 객체에 대해 신경쓸 필요가 없다!</strong> 즉 크로스 브라우징에 관한 이슈가 해결된다.<br>SyntheticEvent 에 관한 속성들은 따로 언급하진 않겠다.<br>DOM 이벤트와 완벽하게 매칭되는게 아니므로 찾아볼 게 있을때는 React 공식문서를 참조하도록 하자.<br><a href="https://reactjs.org/docs/events.html" rel="external nofollow noopener noreferrer" target="_blank">SyntheticEvent - React</a></p><hr><h3 id="개인-공부용으로-쓴-글이라-혹시-잘못된-정보가-있다면-댓글로-알려주시면-수정하도록하겠습니다"><a href="#개인-공부용으로-쓴-글이라-혹시-잘못된-정보가-있다면-댓글로-알려주시면-수정하도록하겠습니다" class="headerlink" title="개인 공부용으로 쓴 글이라 혹시 잘못된 정보가 있다면 댓글로 알려주시면 수정하도록하겠습니다."></a>개인 공부용으로 쓴 글이라 혹시 잘못된 정보가 있다면 댓글로 알려주시면 수정하도록하겠습니다.</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/images/react.jpg&quot;/&gt;&lt;hr&gt;
&lt;h1 id=&quot;목차&quot;&gt;&lt;a href=&quot;#목차&quot; class=&quot;headerlink&quot; title=&quot;목차&quot;&gt;&lt;/a&gt;목차&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#react-dom-differenc
      
    
    </summary>
    
      <category term="React" scheme="https://y0c.github.io/categories/React/"/>
    
    
      <category term="React" scheme="https://y0c.github.io/tags/React/"/>
    
      <category term="Event Handling" scheme="https://y0c.github.io/tags/Event-Handling/"/>
    
  </entry>
  
</feed>
